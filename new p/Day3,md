### Forms and Inputs in HTML

Forms in HTML allow users to enter data and send it to a server for processing. They are used for tasks such as signing up, logging in, and submitting feedback.

#### Basic Form Structure

A form in HTML is created using the `<form>` element, which wraps all input fields. Data from the form is sent to the server when the user submits the form.

Example:
```html
<form action="/submit-form" method="POST">
  <!-- Form elements go here -->
</form>
```

- **`action`**: Specifies the URL where the form data will be sent.
- **`method`**: Defines how the data will be sent to the server. Common methods are:
  - **`GET`**: Appends form data to the URL, often used for search queries.
  - **`POST`**: Sends form data as part of the request body, often used for sensitive information like passwords.

#### Form Elements

1. **`<input>`**: Used to create various types of form controls.
2. **`<textarea>`**: Provides a multi-line text input field.
3. **`<select>` and `<option>`**: Creates a dropdown list.
4. **`<button>`**: Adds a clickable button to submit or reset the form.

Example:
```html
<form>
  <label for="name">Name:</label>
  <input type="text" id="name" name="name">
  
  <label for="message">Message:</label>
  <textarea id="message" name="message"></textarea>

  <button type="submit">Submit</button>
</form>
```

#### Input Types

1. **Text**: `<input type="text">` - Single-line text input.
2. **Password**: `<input type="password">` - Obscured text for passwords.
3. **Email**: `<input type="email">` - Email format validation.
4. **Number**: `<input type="number">` - Allows only numeric input.
5. **Radio Buttons**: `<input type="radio">` - Allows selection of one option from a set.
6. **Checkboxes**: `<input type="checkbox">` - Allows selection of multiple options.

Example:
```html
<label for="email">Email:</label>
<input type="email" id="email" name="email" required>

<label for="age">Age:</label>
<input type="number" id="age" name="age" min="18" max="99">

<label>Gender:</label>
<input type="radio" id="male" name="gender" value="male">
<label for="male">Male</label>
<input type="radio" id="female" name="gender" value="female">
<label for="female">Female</label>

<label for="subscribe">Subscribe to newsletter:</label>
<input type="checkbox" id="subscribe" name="subscribe" value="yes">
```

---

### Topics to Cover

#### How Forms Work (Client-Server Communication)

When a user submits a form, the browser sends the form data to a server, where it is processed. The form data can be sent using the **GET** or **POST** method. In the case of **POST**, the data is sent securely as part of the HTTP request body, whereas **GET** appends it to the URL, which is less secure.

#### Labels and Accessibility

The `<label>` element makes forms more accessible by associating text labels with form inputs. The `for` attribute of the `<label>` should match the `id` of the corresponding input.

Example:
```html
<label for="email">Email:</label>
<input type="email" id="email" name="email">
```

Screen readers use labels to assist users with disabilities in understanding the form controls.

#### HTML5 Form Validation

HTML5 provides built-in form validation features, such as the `required`, `min`, `max`, `pattern`, and `type` attributes, to ensure users enter data in the correct format.

Example:
```html
<input type="email" name="email" required placeholder="Enter your email">
```

You can use these attributes to validate fields without needing JavaScript:
- **`required`**: Makes a field mandatory.
- **`pattern`**: Defines a regular expression to match the input value.
- **`min` and `max`**: Restrict numeric input to a range.
- **`type="email"`**: Ensures a valid email format.

---

### Practice

#### Build a Contact Form with Text Inputs, Checkboxes, Radio Buttons, and a Submit Button

Example:
```html
<!DOCTYPE html>
<html>
<head>
    <title>Contact Form</title>
</head>
<body>
    <h1>Contact Us</h1>
    <form action="/submit-contact" method="POST">
        <!-- Name Input -->
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" placeholder="Enter your name" required>

        <!-- Email Input -->
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" placeholder="Enter your email" required>

        <!-- Radio Buttons for Gender -->
        <label>Gender:</label>
        <input type="radio" id="male" name="gender" value="male" required>
        <label for="male">Male</label>
        <input type="radio" id="female" name="gender" value="female">
        <label for="female">Female</label>

        <!-- Checkboxes for Subscription -->
        <label for="subscribe">Subscribe to newsletter:</label>
        <input type="checkbox" id="subscribe" name="subscribe" value="yes">

        <!-- Message Textarea -->
        <label for="message">Message:</label>
        <textarea id="message" name="message" placeholder="Your message" required></textarea>

        <!-- Submit Button -->
        <button type="submit">Submit</button>
    </form>
</body>
</html>
```

#### Add Validation to the Form

To ensure that users fill out the form correctly, you can add validation:

- **`required`**: Ensures fields are not left empty.
- **`type="email"`**: Validates email format.
- **`pattern`**: Restricts input to match a specific pattern.
  
Example:
```html
<form>
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required placeholder="Enter a valid email">

  <label for="phone">Phone:</label>
  <input type="tel" id="phone" name="phone" pattern="[0-9]{10}" placeholder="Enter 10-digit phone number" required>

  <button type="submit">Submit</button>
</form>
```
